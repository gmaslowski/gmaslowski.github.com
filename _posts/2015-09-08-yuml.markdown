---
layout: post
title: Drawing simple diagrams with yUml
date: 2015-09-08
description: yUml - free online diagram generator
---

Lately I was starting yet another project for learning/fun purposes. Since recently I'm a big fan of 
[Scala](http://www.scala-lang.org) and [Akka](http://akka.io/) there's no secret I decided to start 
[distractor](http://github.com/gmaslowski/distractor) using them. The project is based upon [reactor](https://github.com/FutureProcessing/reactor) 
and it's aim is to allow distribution of transports and reactors across multiple nodes/JVMs.

So, there I was, with a started project, with already some code committed. What I wanted to do next was to somehow 
document the architecture of the underlying actor model. I didn't want to use any sort of visual diagram generators, since
I don't like the drawback of being forced to maintain multiple file versions of created diagram or to export the jpg/png/svg
file to include it into wiki.

So while searching the depths of internet I've come across [yUml](http://yuml.me/). It turned out great for my needs.
It allows you to create simple diagrams from plain text! For me it's great, since I can simply write such diagram and put 
it into code repository. That's it. 

## Possibilities
So let's quickly evaluate the possibilities which are given by this tool. So far with yUml everyone is able to create 
three types of diagrams: class, activity, use case. So far I only needed to create something which could demonstrate my 
actor architecture. So obviously the class diagram suited me the most.

So lets examine some easy class diagram:
{% highlight ruby %}
[Customer|-forname:string;surname:string|doShiz()]<>-orders*>[Order]
[Order]++-0..*>[LineItem]
[Order]-[note:Aggregate root{bg:wheat}]
{% endhighlight %}

What we can expect from the output image? So there should be:
- a *Customer* entity
    - with forname, surname fields
    - with doShiz() method
- a *Order* entity
    - 
- a note with defined color linked with *Order* entity


![Hello](http://yuml.me/diagram/scruffy/class/[Customer|-forname:string;surname:string|doShiz()]<>-orders*>[Order], [Order]++-0..*>[LineItem], [Order]-[note:Aggregate root{bg:wheat}])

Most of what's possible can be found here:
- [class diagram](http://yuml.me/diagram/scruffy/class/samples)
- [activity diagram](http://yuml.me/diagram/scruffy/activity/samples)
- [use case diagram](http://yuml.me/diagram/scruffy/usecase/samples)

## Outcome

## Drawbacks

## Other solutions
